<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Payment">
	<resultMap type="Payment" id="paymentResultSet">
		<id property="paymentId" column="PAYMENT_ID"/>
		
		<result property="tid" column="TID"/>
		<result property="memberId" column="MEMBER_ID"/>
		<result property="payAmount" column="PAY_AMOUNT"/>
		<result property="paymentDate" column="PAYMENT_DATE"/>
	</resultMap>
	<resultMap type="ReservePoint" id="reserveResultSet">
		<id property="pointId" column="POINT_ID"/>
		
		<result property="reservePoint" column="RESERVE_POINT"/>
		<result property="reserveDate" column="RESERVE_DATE"/>
		<result property="memberId" column="MEMBER_ID"/>
		<result property="reserveType" column="RESERVE_TYPE"/>
		<result property="reviewId" column="REVIEW_ID"/>
		<result property="spotReviewId" column="SPOT_REVIEW_ID"/>
		<result property="trvId" column="TRV_ID"/>
	</resultMap>
	<resultMap type="UsePoint" id="useResultSet">
		<id property="pointId" column="POINT_ID"/>
		
		<result property="usePoint" column="USE_POINT"/>
		<result property="useDate" column="USE_DATE"/>
		<result property="useType" column="USE_TYPE"/>
		<result property="memberId" column="MEMBER_ID"/>
		<result property="trvId" column="TRV_ID"/>
		<result property="requestId" column="REQUEST_ID"/>
	</resultMap>
	<resultMap type="Refund" id="refundResultSet">
		<id property="refundId" column="REFUND_ID"/>
		
		<result property="refundReason" column="REFUND_REASON"/>
		<result property="applyDate" column="APPLY_DATE"/>
		<result property="processedDate" column="PROCESSED_DATE"/>
		<result property="refundStatus" column="REFUND_STATUS"/>
		<result property="pointId" column="POINT_ID"/>
	</resultMap>
	<resultMap type="Proceeds" id="proceedsResultSet">
		<id property="proceedsId" column="PROCEEDS_ID"/>
		<result property="proceeds" column="PROCEEDS"/>
		<result property="accumulateProceeds" column="ACCUMULATE_PROCEEDS"/>
		<result property="proceedsDate" column="PROCEEDS_DATE"/>
		<result property="proceedsType" column="PROCEEDS_TYPE"/>
		<result property="memberId" column="MEMBER_ID"/>
		<result property="trvId" column="TRV_ID"/>
		<result property="ptcpId" column="PTCP_ID"/>
	</resultMap>
	<resultMap type="Proceeds" id="proceedsALlResultSet">
		<id property="proceedsId" column="PROCEEDS_ID"/>
		<result property="proceeds" column="PROCEEDS"/>
		<result property="proceedsDate" column="PROCEEDS_DATE"/>
		<result property="proceedsType" column="PROCEEDS_TYPE"/>
		<result property="memberId" column="MEMBER_ID"/>
		<result property="trvId" column="TRV_ID"/>
		<result property="ptcpId" column="PTCP_ID"/>
		<result property = "sumTrv" column="SUMTRV" javaType = "_int"/>
		<result property = "sumPtcp" column="SUMPTCP" javaType = "_int"/>
	</resultMap>
	<!-- 포인트 충전 -->
	<insert id="insertPay" parameterType="Payment">
		INSERT INTO PAYMENT
		VALUES(PAYMENT_SEQ.NEXTVAL, #{tid}, #{memberId}, #{payAmount}, #{paymentDate})
	</insert>	
	<!-- 포인트 충전 리스트 전체 카운터 -->
	<select id="getChargeListCount" parameterType="Payment" resultType="_int">
		SELECT COUNT(*)
		FROM PAYMENT
		WHERE MEMBER_ID=#{memberId}
		<choose>
			<when test="month != null and month != 0">
				AND EXTRACT(MONTH FROM PAYMENT_DATE)=#{month}
			</when>
		</choose>
	</select>
	<!-- 포인트 지급 리스트 전체 카운터 -->
	<select id="getReceiveListCount" parameterType="ReservePoint" resultType="_int">
		SELECT COUNT(*)
		FROM RESERVE_POINT
		WHERE MEMBER_ID=#{memberId}
		<choose>
			<when test="month != null and month != 0">
				AND EXTRACT(MONTH FROM RESERVE_DATE)=#{month}
			</when>
		</choose>
	</select>
	<!-- 포인트 사용 리스트 전체 카운터 -->
	<select id="getUseListCount" parameterType="UsePoint" resultType="_int">
		SELECT COUNT(*)
		FROM USE_POINT
		WHERE MEMBER_ID=#{memberId}
		<choose>
			<when test="month != null and month != 0">
				AND EXTRACT(MONTH FROM USE_DATE)=#{month}
			</when>
		</choose>
	</select>
	<!-- 포인트 충전리스트 전체 조회 -->
	<select id="selectChargeList" parameterType="Payment" resultMap="paymentResultSet">
		SELECT *<!-- PAYMENT_ID, TID, MEMBER_ID, PAY_AMOUNT, TO_CHAR(PAYMENT_DATE,'YYYY/MM/DD') -->
		FROM PAYMENT
		WHERE MEMBER_ID=#{memberId}
		<choose>
			<when test="month != null and month != 0">
				AND EXTRACT(MONTH FROM PAYMENT_DATE)=#{month}
			</when>
		</choose>
		ORDER BY PAYMENT_DATE DESC
	</select>
	<!-- 포인트 지급리스트 전체 조회 -->
	<select id="selectReceiveList" parameterType="ReservePoint" resultMap="reserveResultSet">
		SELECT *
		FROM RESERVE_POINT
		WHERE MEMBER_ID=#{memberId}
		<choose>
			<when test="month != null and month != 0">
				AND EXTRACT(MONTH FROM RESERVE_DATE)=#{month}
			</when>
		</choose>
		ORDER BY RESERVE_DATE DESC
	</select>
	<!-- 포인트 사용리스트 전체 조회 -->
	<select id="selectUseList" parameterType="UsePoint" resultMap="useResultSet">
		SELECT *
		FROM USE_POINT
		WHERE MEMBER_ID=#{memberId}
		<choose>
			<when test="month != null and month != 0">
				AND EXTRACT(MONTH FROM USE_DATE)=#{month}
			</when>
		</choose>
		ORDER BY USE_DATE DESC
	</select>
	<!-- 포인트 자동으로 적립하기 -->
	<insert id="insertReservePoint" parameterType="ReservePoint">
		INSERT INTO RESERVE_POINT
		VALUES( RESERVE_POINT_SEQ.NEXTVAL, #{reservePoint}, #{reserveDate}, #{memberId}, #{reserveType},
		<choose>
			<when test="reviewId != 0">#{reviewId}, null, null</when>
			<when test="spotReviewId != 0">null, #{spotReviewId}, null </when>
			<when test="trvId != 0">null, null, #{trvId}</when>
		</choose> )
	</insert>	
	<!-- 포인트 환불신청하기-> 환불 내역에 인서트 -->
	<insert id="insertRefund" parameterType="Refund">
		INSERT INTO REFUND
		VALUES( 
			REFUND_SEQ.NEXTVAL, #{refundReason}, SYSDATE, NULL, #{refundStatus}, #{pointId}
		)
	</insert>
	<!-- 해당 reviewId로 trvId 조회해오기 -->
	<select id="selectOneTrv" resultType="_int">
		SELECT TRV_ID
		FROM TOUR_REVIEW
		WHERE REVIEW_ID = #{reviewId}
	</select>
	<!-- Member 테이블의 userPoint조회해오기 -->
	<select id="selectUserPoint" parameterType="_int" resultType="_int">
		SELECT USER_POINT
		FROM MEMBER
		WHERE MEMBER_ID = #{memberId}
	</select>
	<!-- Member 테이블의 userPoint조회해오기 -->
	<select id="selectUserProceeds" parameterType="_int" resultType="_int">
		SELECT USER_PROCEEDS
		FROM MEMBER
		WHERE MEMBER_ID = #{memberId}
	</select>
	<!-- 포인트 사용 후 포인트 사용내역에 insert -->
	<insert id="insertPointUse" parameterType="UsePoint">
		INSERT INTO USE_POINT
		VALUES(
			USE_POINT_SEQ.NEXTVAL, #{usePoint}, SYSDATE, #{useType}, #{memberId}, 
			<choose>
				<when test="trvId != 0">#{trvId}, null</when>
				<when test="requestId != 0">null, #{requestId}</when>
			</choose>)
	</insert>
	<!-- 포인트 충전시 멤버 테이블의 누적포인트 증가 -->
	<update id="updateUserPoint" parameterType="Payment">
		UPDATE MEMBER
		SET USER_POINT = USER_POINT + #{payAmount}
		WHERE MEMBER_ID = #{memberId}
		<!-- <if test="payAmount != null">
			UPDATE MEMBER
			SET USER_POINT = USER_POINT + #{payAmount jdbcType=NUMERIC}
			WHERE MEMBER_ID = #{memberId}
		</if> -->
		
	</update>
	<!-- 수익금 여행글에 따른 memberId 찾기 -->
	<select id="selectReceiverTrvMemberId" resultType="_int">
		SELECT MEMBER_ID
		FROM TRAVEL
		WHERE TRV_ID = #{trvId}
	</select>
	<!-- 수익금 의뢰글에 따른 memberId 찾기 -->
	<select id="selectReceiverRequestMemberId" resultType="_int">
		SELECT MEMBER_ID
		FROM PARTICIPATION P
		JOIN TRV_PLAN TP ON(TP.PLAN_ID=P.PLAN_ID)
		WHERE PTCP_ID=#{ptcpId}
	</select>
	<!-- 누적수익금을 위한 기존 수익금 조회 -->
	<select id="selectOneProceeds" parameterType="Proceeds" resultMap="proceedsResultSet">
		SELECT *
		FROM PROCEEDS
		<choose>
			<when test="trvId != 0">
				WHERE TRV_ID=#{trvId} 
				AND PROCEEDS_ID = (
					    SELECT MAX(PROCEEDS_ID)
					    FROM PROCEEDS
					    WHERE TRV_ID=#{trvId}	    
					)
			</when>
			<when test="ptcpId != 0">
				WHERE PTCP_ID=#{ptcpId}
				AND PROCEEDS_ID = (
					    SELECT MAX(PROCEEDS_ID)
					    FROM PROCEEDS
					    WHERE PTCP_ID=#{ptcpId}    
					)
			</when>
		</choose>
	</select>
	
	<!-- 성공시 수익금발생내역에 인서트 -->
	<insert id="insertReceiverProceeds" parameterType="Proceeds">
		INSERT INTO PROCEEDS
		VALUES(
			PROCEEDS_SEQ.NEXTVAL, #{proceeds}, #{accumulateProceeds}, SYSDATE, #{proceedsType}, #{memberId},
			<choose>
				<when test="trvId != 0">#{trvId}, null</when>
				<when test="ptcpId != 0">null, #{ptcpId}</when>
			</choose>)
	</insert>
	<!-- 성공시 member 테이블의 누적 포인트 차감(memberId) -->
	<update id="updateUserDeductionPoint" parameterType="UsePoint">
		UPDATE MEMBER
		SET USER_POINT = USER_POINT - #{usePoint}
		WHERE MEMBER_ID = #{memberId}
	</update>
	<!-- 성공시 member 테이블의 누적 수익금 추가 -->
	<update id="updateUserIncreaseProceeds" parameterType="Proceeds">
		UPDATE MEMBER
		SET USER_PROCEEDS = USER_PROCEEDS + #{proceeds}
		WHERE MEMBER_ID = #{memberId}
	</update>
	
	<!-- 수익금 달성내역 전체 리스트 카운트 -->
	<select id="getProceedsListCount" parameterType="Proceeds" resultType="_int">
	</select>
	<!-- <select id="getProceedsListCount" parameterType="Proceeds" resultType="java.lang.Integer">
		SELECT COUNT(*)
		FROM (
		    SELECT 
		    (
		        SELECT SUM(PROCEEDS) FROM PROCEEDS P2 
		        WHERE P1.TRV_ID=P2.TRV_ID
		    ) AS SUMTRV, 
		    (
		        SELECT SUM(PROCEEDS) FROM PROCEEDS P2
		        WHERE P1.PTCP_ID=P2.PTCP_ID
		    ) AS SUMPTCP, 
		    PROCEEDS_DATE, PROCEEDS_TYPE, MEMBER_ID, TRV_ID, PTCP_ID
		    FROM PROCEEDS P1
		    WHERE MEMBER_ID = #{memberId} 
		    <choose>
				<when test="month != null and month != 0">AND EXTRACT(MONTH FROM PROCEEDS_DATE)=#{month}</when>
			</choose>
		    AND PROCEEDS_DATE = (
		        SELECT MAX(PROCEEDS_DATE) FROM PROCEEDS P2 WHERE P1.TRV_ID=P2.TRV_ID OR P1.PTCP_ID = P2.PTCP_ID
		    ) AND (
		         (SELECT SUM(PROCEEDS) FROM PROCEEDS P2 WHERE P1.TRV_ID=P2.TRV_ID) >= 30000  OR (SELECT SUM(PROCEEDS) FROM PROCEEDS P2 WHERE P1.PTCP_ID = P2.PTCP_ID) >=30000 
		        )
		)
	</select> -->
	<!-- 수익금 달성내역 가져오기 -->
	<!-- <select id="selectAllProceeds" parameterType="Proceeds" resultType="com.kh.ti.point.model.vo.Proceeds">
		SELECT 
		(
		    SELECT SUM(PROCEEDS) FROM PROCEEDS P2 
		    WHERE P1.TRV_ID=P2.TRV_ID
		) AS SUMTRV, 
		(
		    SELECT SUM(PROCEEDS) FROM PROCEEDS P2
		    WHERE P1.PTCP_ID=P2.PTCP_ID
		) AS SUMPTCP, 
		PROCEEDS_DATE, PROCEEDS_TYPE, MEMBER_ID, TRV_ID, PTCP_ID
		FROM PROCEEDS P1
		WHERE MEMBER_ID = #{memberId} 
		<choose>
			<when test="month != null and month != 0">AND EXTRACT(MONTH FROM PROCEEDS_DATE)=#{month}</when>
		</choose>
		AND PROCEEDS_DATE = (
		    SELECT MAX(PROCEEDS_DATE) FROM PROCEEDS P2 WHERE P1.TRV_ID=P2.TRV_ID OR P1.PTCP_ID = P2.PTCP_ID
		) AND (
		     (SELECT SUM(PROCEEDS) FROM PROCEEDS P2 WHERE P1.TRV_ID=P2.TRV_ID) >= 30000  OR (SELECT SUM(PROCEEDS) FROM PROCEEDS P2 WHERE P1.PTCP_ID = P2.PTCP_ID) >=30000 
		    )
	</select> -->
	
</mapper>